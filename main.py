
import telebot
import requests
import datetime

from telebot import types

import symbols as symb
import answers as ans
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from random import random

#–¢–æ–∫–µ–Ω –±–æ—Ç–∞
bot = telebot.TeleBot('6143676529:AAGMqzKk6wDObeCzMTjLxvoPBv2GLrWRYKQ')
#–¢–æ–∫–µ–Ω –ø–æ–≥–æ–¥—ã
open_weather_token ="477235890e9d958619a2fcead20bf9e6"

#–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ /help
command_list = \
    '–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n' \
    '/register [username] - –≤–æ–π—Ç–∏ –≤ —á–∞—Ç\n' \
    '–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–π –ø—Å–µ–≤–¥–æ–Ω–∏–º, –≤–≤–µ–¥—è –µ–≥–æ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã\n' \
    '–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤–∞—à–µ –∏–º—è\n' \
    '/showusers - –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n' \
    '/message [id/"all"] - –Ω–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n' \
    '–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã\n' \
    '–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ–æ–±—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ "all" –±–µ–∑ –∫–∞–≤—ã—á–µ–∫ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã\n' \
    '/newgame - –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É (–ü–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)\n' \
    '/weather - —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ —Å–≤–æ–µ–º –≥–æ—Ä–æ–¥–µ \n'\
    '/time -—É–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è \n'\
    '/quit - –≤—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞\n' \
    '\n'\
    'P.S: –ß—Ç–æ–±—ã –Ω–µ –≤–≤–æ–¥–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ–µ'

#–°–ª–æ–≤–∞—Ä—å –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
dictionaryAnswer={
    "–ü—Ä–∏–≤–µ—Ç –±–æ—Ç: " :"–ü—Ä–∏–≤–µ—Ç!",
    "–ü—Ä–∏–≤–µ—Ç –ì—Ä–∏–Ω—á" : "–ü—Ä–∏–≤–µ—Ç",
    "–ö–∞–∫ –¥–µ–ª–∞?" : "–ù–æ—Ä–º–∞–ª—å–Ω–æ. –ö–∞–∫ —É –≤–∞—Å?",
    "–ö–∞–∫ –¥–µ–ª–∞ –ì—Ä–∏–Ω—á?" : "–•–æ—Ä–æ—à–æ :)",
    "–ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å?" : "–Ø —É–º–µ—é –º–Ω–æ–≥–æ —á–µ–≥–æ, –ª—É—á—à–µ –ø–æ—Å–º–æ—Ç—Ä–∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ (/help)",
    "–ü–æ–∫–∞ –±–æ—Ç" : "–°—á–∞—Å—Ç–ª–∏–≤–æ!",
    "–ü–æ–∫–∞" : "–ü–æ–∫–∞ :(",
    "–ü–æ–∫–∞ –ì—Ä–∏–Ω—á" : "–ü–æ–∫–∞"
}


registered_users: {int: str} = {}

# –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
@bot.message_handler(commands=['start'])
def start_command(message):
    bot.send_message(
        message.from_user.id,
        '–ü—Ä–∏–≤–µ—Ç.–≠—Ç–æ –ë–æ—Ç –ì—Ä–∏–Ω—á,—è –ø–æ–∫–∞ —á—Ç–æ –Ω–∞—Ö–æ–∂—É—Å—å –Ω–∞ –æ–±—É—á–µ–Ω–∏–∏, –Ω–æ —É–∂–µ –∑–Ω–∞—é –ø–∞—Ä–æ—á–∫—É –∫–æ–º–∞–Ω–¥\n' +
        '–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –æ—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ /help')

# –ö–æ–º–∞–Ω–¥–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥
@bot.message_handler(commands=['help'])
def start_command(message):
    bot.send_message(message.from_user.id, command_list)

# –ö–æ–º–∞–Ω–¥–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —á–∞—Ç–µ
@bot.message_handler(commands=['register'])
def register_command(message: telebot.types.Message):
    user_input = message.text.split()
    # –¢–æ, —á—Ç–æ –≤–≤–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –≤–æ–æ–±—â–µ –≤–≤–µ–ª, –∏–Ω–∞—á–µ –µ–≥–æ –∏–º—è
    username = user_input[1] if len(user_input) > 1 else message.from_user.first_name
    registered_users[message.from_user.id] = username
    bot.send_message(message.from_user.id, '–í—ã –≤–æ—à–ª–∏ –≤ —á–∞—Ç –∫–∞–∫ ' + username)

# –ö–æ–º–∞–Ω–¥–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@bot.message_handler(commands=['showusers'])
def show_users_command(message: telebot.types.Message):
    # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç
    if len(registered_users.values()) == 0:
        bot.send_message(message.from_user.id, '–í —á–∞—Ç–µ –ø–æ–∫–∞ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç')
        return
    output = ''
    # –°–æ—Å—Ç–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    for registered_user in registered_users.items():
        output += registered_user[1] + '\\[`' + str(registered_user[0]) + '`]' + '\n'
    bot.send_message(message.from_user.id, output, parse_mode='Markdown')

# –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
@bot.message_handler(commands=['message'])
def tell_command(message: telebot.types.Message):
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â—ë –Ω–µ –∑–∞—à–µ–ª
    if message.from_user.id not in registered_users.keys():
        bot.send_message(
            message.from_user.id,
            '–í—ã –µ—â—ë –Ω–µ –≤–æ—à–ª–∏ –≤ —á–∞—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /register')
        return
    # –†–∞–∑–±–∏–≤–∞–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–æ–º–∞–Ω–¥—É + –∞–¥—Ä–µ—Å–∞—Ç + —Ç–µ–∫—Å—Ç
    user_input = message.text.split(maxsplit=2)
    if len(user_input) < 2:
        bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
        return
    addressee = user_input[1]
    username = registered_users[message.from_user.id]
    # –ï—Å–ª–∏ —Ö–æ—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–æ–±—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if len(user_input) < 3:
        bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è')
        return
    if addressee.lower() == 'all':
        for target_user_id in registered_users.keys():
            bot.send_message(target_user_id, username + ': ' + user_input[2])
        return
    # –ï—Å–ª–∏ —Ö–æ—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if addressee.isdecimal():
        target_id = int(addressee)
        if target_id in registered_users.keys():
            bot.send_message(target_id, username + ': ' + user_input[2])
            return
    # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ –≤–≤—ë–ª
    bot.send_message(
        message.from_user.id,
        '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
        '–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —É–≤–∏–¥—è—Ç –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤–≤–µ–¥–∏—Ç–µ "all" –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã')

# –ö–æ–º–∞–Ω–¥–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ —á–∞—Ç–∞
@bot.message_handler(commands=['quit'])
def quit_command(message: telebot.types.Message):
    # –ï—Å–ª–∏ –ø—ã—Ç–∞–µ—Ç—Å—è –≤—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞, –Ω–µ –∑–∞—Ö–æ–¥—è –≤ –Ω–µ–≥–æ
    if message.from_user.id not in registered_users:
        bot.send_message(message.from_user.id, '–í—ã –µ—â—ë –Ω–µ –≤—Ö–æ–¥–∏–ª–∏ –≤ —á–∞—Ç')
        return
    # –ï—Å–ª–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –≤—ã—Ö–æ–¥–∏—Ç
    else:
        registered_users.pop(message.from_user.id)
        bot.send_message(message.from_user.id, '–í—ã –≤—ã—à–ª–∏ –∏–∑ —á–∞—Ç–∞')


# –ö–æ–º–∞–Ω–¥–∞ –ø–æ–≥–æ–¥—ã
@bot.message_handler(commands=['weather'])
def weather_command(message: telebot.types.Message):
    msg=bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:")
    bot.register_next_step_handler(msg,getWeather)

#–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã
def getWeather(message):

    city=message.text
    #–°–ª–æ–≤–∞—Ä—å —Å–∏–≤–æ–ª–æ–≤ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–≥–æ–¥–µ
    dictionaryCodeToSmile = {
        "Clear": "–Ø—Å–Ω–æ ‚òÄ",
        "Clouds": "–û–±–ª–∞—á–Ω–æ üå•",
        "Rain": "–î–æ–∂–¥—å üåß",
        "Thunderstorm": "–ì—Ä–æ–∑–∞ ‚ö°",
        "Drizzle": "–ú–æ—Ä–æ—Å—å üíß",
        "Snow": "–°–Ω–µ–≥ ‚ùÑ",
        "Mist": "–¢—É–º–∞–Ω üå´"

    }
    try:
            req=requests.get(f"https://api.openweathermap.org/data/2.5/weather?q={city}&appid={open_weather_token}&units=metric")
            data=req.json()

            # –ü–µ—Ä–µ–±–æ—Ä —Å–ª–æ–≤–∞—Ä—è
            weatherSmile = data["weather"][0]["main"]
            if weatherSmile in dictionaryCodeToSmile:
                ws = dictionaryCodeToSmile[weatherSmile]
            else:
                ws = '–ù–µ –º–æ–≥—É –ø–æ–Ω—è—Ç—å —á—Ç–æ —Ç–∞–º, –≤—ã–≥–ª—è–Ω–∏ –≤ –æ–∫–Ω–æ'

            city=data["name"]
            weatherNow= data["main"]["temp"]
            weatherMax=data["main"]["temp_max"]
            weatherMin=data["main"]["temp_min"]
            humidity=data["main"]["humidity"]
            wind=data["wind"]["speed"]
            sunrise=datetime.datetime.fromtimestamp(data["sys"]["sunrise"])
            sunset = datetime.datetime.fromtimestamp(data["sys"]["sunset"])

            bot.send_message(message.from_user.id,f'–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ: {city}\n'
                  f'–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞ —Å–µ–π—á–∞—Å: {weatherNow} C¬∞ {ws}\n'
                  f'–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞ –∑–∞ –¥–µ–Ω—å: {weatherMax} C¬∞\n'
                  f'–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞ –∑–∞ –¥–µ–Ω—å: {weatherMin} C¬∞\n'
                  f'–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity} %\n'
                  f'–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind} –º/c\n'
                  f'–†–∞—Å—Å–≤–µ—Ç: {sunrise}\n'
                  f'–ó–∞–∫–∞—Ç: {sunset}\n'
                  f'–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–∞–º –¥–Ω—è'
                  )
    except Exception as ex:
        if(message.text[:1] == '/'):
            bot.send_message(message.from_user.id, '–í–æ–∑–º–æ–∂–Ω–æ –≤—ã —Å–ª—É—á–∞–π–Ω–æ –≤–≤–µ–ª–∏ –∫–æ–º–∞–Ω–¥—É, –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ–µ –µ—â–µ —Ä–∞–∑')
        else:
          while message.text[:1] != '/':
            msg = bot.send_message(message.from_user.id, '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ')
            bot.register_next_step_handler(msg, getWeather)
            break








check=False

#–í—ã–±–æ—Ä –∏–≥—Ä—ã (–∫—Ä–µ—Å—Ç–∏–∫ –∏–ª–∏ –Ω–æ–ª–∏–∫)

@bot.message_handler(commands=['newgame'])
def newgame_command(message: telebot.types.Message):
    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(telebot.types.InlineKeyboardButton(text=symb.symbolX, callback_data='x'))
    markup.add(telebot.types.InlineKeyboardButton(text=symb.symbol0, callback_data='o'))

    if message.text == '/newgame':
        msg = bot.send_message(message.chat.id, text='–í—ã–±–µ—Ä–∏ –∑–∞ –∫–æ–≥–æ –±—É–¥–µ—à—å –∏–≥—Ä–∞—Ç—å', reply_markup=markup)


@bot.callback_query_handler(func=lambda call: True)
def step(callback_query: telebot.types.CallbackQuery):
    if callback_query.data == 'x':
       ai = symb.symbol0
       player = symb.symbolX
       check=True
       board_game(callback_query.message,ai,player,check)

       # msg= bot.send_message(callback_query.message.from_user.id,'–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä!–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º: {}'.format(a))
    elif callback_query.data == 'o':
        ai = symb.symbolX
        player = symb.symbol0
        check = False
        board_game(callback_query.message, ai, player, check)



bot_send=True


def make_bot_false():
    global bot_send
    bot_send = False

def plus_hod():
    hod += 1

ai=symb.symbol0
player=symb.symbolX

#–ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ
def board_game(message,ai,player,check):
    global board,hod
    board = [[symb.symbolDef] * 3 for i in range(3)]
    hod = 0
    keyboard = types.InlineKeyboardMarkup(row_width=3)

    if(check):
        b1 = types.InlineKeyboardButton(text=symb.symbolDef, callback_data=1)
    else:
        b1 = types.InlineKeyboardButton(text=symb.symbolX, callback_data=1)

    b2 = types.InlineKeyboardButton(text=symb.symbolDef, callback_data=2)
    b3 = types.InlineKeyboardButton(text=symb.symbolDef, callback_data=3)
    b4 = types.InlineKeyboardButton(text=symb.symbolDef, callback_data=4)
    b5 = types.InlineKeyboardButton(text=symb.symbolDef, callback_data=5)
    b6 = types.InlineKeyboardButton(text=symb.symbolDef, callback_data=6)
    b7 = types.InlineKeyboardButton(text=symb.symbolDef, callback_data=7)
    b8 = types.InlineKeyboardButton(text=symb.symbolDef, callback_data=8)
    b9 = types.InlineKeyboardButton(text=symb.symbolDef, callback_data=9)
    keyboard.add(b1, b2, b3, b4, b5, b6, b7, b8, b9)
    if bot_send:
        make_bot_false()
        if(check):
            mes = bot.send_message(message.chat.id, '–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä!–î–∞–≤–∞–π, –ø–µ—Ä–≤—ã–π —Ö–æ–¥ –∑–∞ —Ç–æ–±–æ–π', reply_markup=keyboard)
        else:
            msg = bot.send_message(message.chat.id, '–•–º–º–º, –ª–∞–∞–∞–¥–Ω–æ, –ø—É—Å—Ç—å –±—É–¥–µ—Ç –ø–æ —Ç–≤–æ–µ–º—É', reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: True)
def query_handler(call: telebot.types.CallbackQuery):
    if call.data == '1':
        call_data(0, 0, call.message)
    elif call.data == '2':
        call_data(0, 1,call.message)
    elif call.data == '3':
        call_data(0, 2, call.message)
    elif call.data == '4':
        call_data(1, 0, call.message)
    elif call.data == '5':
        call_data(1, 1, call.message)
    elif call.data == '6':
        call_data(1, 2, call.message)
    elif call.data == '7':
        call_data(2, 0, call.message)
    elif call.data == '8':
        call_data(2, 1, call.message)
    elif call.data == '9':
        call_data(2, 2, call.message)
    else:
        bot.answer_callback_query(call.message.chat.id, '–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')


def call_data(index1, index2, message):
    if hod % 2 != 0:
        if board[index1][index2] == symb.symbolDef:
            board[index1][index2] = symb.symbolX
            plus_hod()
            bot.send_message(message.chat.id,'–¢–≤–æ–π —Ö–æ–¥',reply_markup=make_board())
    elif hod % 2 != 0:
        if board[index1][index2] == symb.symbolDef:
            board[index1][index2] = symb.symbol0
            plus_hod()
            bot.send_message(message.chat.id,'–¢–≤–æ–π —Ö–æ–¥',reply_markup=make_board())

# def call_data(index1, index2, call):
#     global board, player
#     if hod % 2 != 0 or check:
#         if board[index1][index2] == symb.symbolDef:
#             board[index1][index2] = symb.symbolX
#             plus_hod()
#             bot.edit_message_reply_markup(user2.id, message_id=us2_mes.id, reply_markup=make_board())
#             bot.edit_message_reply_markup(user1.id, message_id=us1_mes.id, reply_markup=make_board())
#             if check_win(board)[0] == True or check_win(board)[0] == None:
#                 if check_win(board)[0] == None:
#                     draw = True
#                 else:
#                     draw = False
#                 bot.edit_message_reply_markup(user1.id, message_id=us1_mes.id,
#                                               reply_markup=make_board(end=True, draw=draw, symbol=check_win(board)))
#                 bot.edit_message_reply_markup(user2.id, message_id=us2_mes.id,
#                                               reply_markup=make_board(end=True, draw=draw, symbol=check_win(board)))
#                 players.clear()
#         else:
#             bot.answer_callback_query(callback_query_id=call.id, text='–≠—Ç–∞ –∫–ª–µ—Ç–∫–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞!')
#     elif hod % 2 != 0 and call.message.chat.id == user1.id:
#         if board[index1][index2] == symb.symbolDef:
#             board[index1][index2] = symb.symbol0
#             plus_hod()
#             bot.edit_message_reply_markup(user2.id, message_id=us2_mes.id, reply_markup=make_board())
#             bot.edit_message_reply_markup(user1.id, message_id=us1_mes.id, reply_markup=make_board())
#             if check_win(board)[0] == True or check_win(board)[0] == None:
#                 if check_win(board)[0] == None:
#                     draw = True
#                 else:
#                     draw = False
#                 bot.edit_message_reply_markup(user1.id, message_id=us1_mes.id,
#                                               reply_markup=make_board(end=True, draw=draw, symbol=check_win(board)))
#                 bot.edit_message_reply_markup(user2.id, message_id=us2_mes.id,
#                                               reply_markup=make_board(end=True, draw=draw, symbol=check_win(board)))
#                 players.clear()
#         else:
#             bot.answer_callback_query(callback_query_id=call.id, text='–≠—Ç–∞ –∫–ª–µ—Ç–∫–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞!')
#     else:
#         bot.answer_callback_query(callback_query_id=call.id, text='–ù–µ —Ç–≤–æ–π —Ö–æ–¥! –û–∂–∏–¥–∞–π —Å–æ–ø–µ—Ä–Ω–∏–∫–∞!')

def make_board(end = False, draw = False, symbol = symb.symbolX ):
    # if end:
    #     keyboard = types.InlineKeyboardMarkup(row_width=3)
    #     if draw:
    #         txt = '–ö–æ–Ω–µ—Ü! –ù–∏—á—å—è!'
    #     else:
    #         txt = f'–ö–æ–Ω–µ—Ü! –ü–æ–±–µ–¥–∏–ª –∏–≥—Ä–æ–∫ , –∫–æ—Ç–æ—Ä—ã–π –∏–≥—Ä–∞–ª –∑–∞ "{symbol[1]}"'
    #     b1 = types.InlineKeyboardButton(text=txt, callback_data=102)
    #     keyboard.add(b1)
    #     return keyboard
    keyboard = types.InlineKeyboardMarkup(row_width=3)
    b1 = types.InlineKeyboardButton(text=board[0][0], callback_data=1)
    b2 = types.InlineKeyboardButton(text=board[0][1], callback_data=2)
    b3 = types.InlineKeyboardButton(text=board[0][2], callback_data=3)
    b4 = types.InlineKeyboardButton(text=board[1][0], callback_data=4)
    b5 = types.InlineKeyboardButton(text=board[1][1], callback_data=5)
    b6 = types.InlineKeyboardButton(text=board[1][2], callback_data=6)
    b7 = types.InlineKeyboardButton(text=board[2][0], callback_data=7)
    b8 = types.InlineKeyboardButton(text=board[2][1], callback_data=8)
    b9 = types.InlineKeyboardButton(text=board[2][2], callback_data=9)
    keyboard.add(b1, b2, b3, b4, b5, b6, b7, b8, b9)
    return keyboard

#–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–±–µ–¥
def check_win(board):
    for i in range(3):
        if board[i][1] == board[i][0] and board[i][1] == board[i][2] and board[i][1] != symb.symbolDef:
            return True, board[i][0]
    for i in range(3):
        if board[1][i] == board[0][i] and board[1][i] == board[2][i] and board[1][i] != symb.symbolDef:
            return True, board[1][i]
    for i in range(2):
        if board[0][0] == board[1][1] and board[1][1] != symb.symbolDef and board[1][1] == board[2][2]:
            return True, board[0][0]
        elif board[1][1] != symb.symbolDef and board[1][1] == board[0][2] and board[0][2] == board[2][0]:
            return True, board[1][1]
    if board[0][0] != symb.symbolDef and board[1][0] != symb.symbolDef and board[2][0] != symb.symbolDef and board[1][0] != symb.symbolDef and board[1][
        1] != symb.symbolDef and board[1][2] != symb.symbolDef and board[2][0] != symb.symbolDef and board[2][1] != symb.symbolDef and board[2][2] != symb.symbolDef:
        return None, None
    return False, False







#–ö–æ–º–∞–Ω–¥–∞ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
@bot.message_handler(commands=['time'])
def time_command(message: telebot.types.Message):
    bot.send_message(message.from_user.id, "–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Ç–≤–æ–µ–º –≥–æ—Ä–æ–¥–µ : \n"
                                f"---{datetime.datetime.now().strftime('%Y-%m-%d %H:%M')}---")


# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
def main():
    bot.infinity_polling()

#–ó–∞–ø—É—Å–∫
main()