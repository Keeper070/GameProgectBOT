
import telebot
import requests
import datetime
import math

from telebot import types

from telegram import InlineKeyboardButton, InlineKeyboardMarkup
import random

#–¢–æ–∫–µ–Ω –±–æ—Ç–∞
bot = telebot.TeleBot('6143676529:AAGMqzKk6wDObeCzMTjLxvoPBv2GLrWRYKQ')
#–¢–æ–∫–µ–Ω –ø–æ–≥–æ–¥—ã
open_weather_token ="477235890e9d958619a2fcead20bf9e6"

#–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ /help
command_list = \
    '–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n' \
    '/register [username] - –≤–æ–π—Ç–∏ –≤ —á–∞—Ç\n' \
    '–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–π –ø—Å–µ–≤–¥–æ–Ω–∏–º, –≤–≤–µ–¥—è –µ–≥–æ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã\n' \
    '–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤–∞—à–µ –∏–º—è\n' \
    '/showusers - –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n' \
    '/message [id/"all"] - –Ω–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n' \
    '–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã\n' \
    '–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ–æ–±—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ "all" –±–µ–∑ –∫–∞–≤—ã—á–µ–∫ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã\n' \
    '/newgame - –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É (–ü–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)\n' \
    '/weather - —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ —Å–≤–æ–µ–º –≥–æ—Ä–æ–¥–µ \n'\
    '/time -—É–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è \n'\
    '/quit - –≤—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞\n' \
    '\n'\
    'P.S: –ß—Ç–æ–±—ã –Ω–µ –≤–≤–æ–¥–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ–µ'

#–°–ª–æ–≤–∞—Ä—å –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
dictionaryAnswer={
    "–ü—Ä–∏–≤–µ—Ç –±–æ—Ç: " :"–ü—Ä–∏–≤–µ—Ç!",
    "–ü—Ä–∏–≤–µ—Ç –ì—Ä–∏–Ω—á" : "–ü—Ä–∏–≤–µ—Ç",
    "–ö–∞–∫ –¥–µ–ª–∞?" : "–ù–æ—Ä–º–∞–ª—å–Ω–æ. –ö–∞–∫ —É –≤–∞—Å?",
    "–ö–∞–∫ –¥–µ–ª–∞ –ì—Ä–∏–Ω—á?" : "–•–æ—Ä–æ—à–æ :)",
    "–ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å?" : "–Ø —É–º–µ—é –º–Ω–æ–≥–æ —á–µ–≥–æ, –ª—É—á—à–µ –ø–æ—Å–º–æ—Ç—Ä–∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ (/help)",
    "–ü–æ–∫–∞ –±–æ—Ç" : "–°—á–∞—Å—Ç–ª–∏–≤–æ!",
    "–ü–æ–∫–∞" : "–ü–æ–∫–∞ :(",
    "–ü–æ–∫–∞ –ì—Ä–∏–Ω—á" : "–ü–æ–∫–∞"
}


registered_users: {int: str} = {}

# –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
@bot.message_handler(commands=['start'])
def start_command(message):
    bot.send_message(
        message.from_user.id,
        '–ü—Ä–∏–≤–µ—Ç.–≠—Ç–æ –ë–æ—Ç –ì—Ä–∏–Ω—á,—è –ø–æ–∫–∞ —á—Ç–æ –Ω–∞—Ö–æ–∂—É—Å—å –Ω–∞ –æ–±—É—á–µ–Ω–∏–∏, –Ω–æ —É–∂–µ –∑–Ω–∞—é –ø–∞—Ä–æ—á–∫—É –∫–æ–º–∞–Ω–¥\n' +
        '–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –æ—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ /help')

# –ö–æ–º–∞–Ω–¥–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥
@bot.message_handler(commands=['help'])
def start_command(message):
    bot.send_message(message.from_user.id, command_list)

# –ö–æ–º–∞–Ω–¥–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —á–∞—Ç–µ
@bot.message_handler(commands=['register'])
def register_command(message: telebot.types.Message):
    user_input = message.text.split()
    # –¢–æ, —á—Ç–æ –≤–≤–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –≤–æ–æ–±—â–µ –≤–≤–µ–ª, –∏–Ω–∞—á–µ –µ–≥–æ –∏–º—è
    username = user_input[1] if len(user_input) > 1 else message.from_user.first_name
    registered_users[message.from_user.id] = username
    bot.send_message(message.from_user.id, '–í—ã –≤–æ—à–ª–∏ –≤ —á–∞—Ç –∫–∞–∫ ' + username)

# –ö–æ–º–∞–Ω–¥–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@bot.message_handler(commands=['showusers'])
def show_users_command(message: telebot.types.Message):
    # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç
    if len(registered_users.values()) == 0:
        bot.send_message(message.from_user.id, '–í —á–∞—Ç–µ –ø–æ–∫–∞ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç')
        return
    output = ''
    # –°–æ—Å—Ç–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    for registered_user in registered_users.items():
        output += registered_user[1] + '\\[`' + str(registered_user[0]) + '`]' + '\n'
    bot.send_message(message.from_user.id, output, parse_mode='Markdown')

# –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
@bot.message_handler(commands=['message'])
def tell_command(message: telebot.types.Message):
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â—ë –Ω–µ –∑–∞—à–µ–ª
    if message.from_user.id not in registered_users.keys():
        bot.send_message(
            message.from_user.id,
            '–í—ã –µ—â—ë –Ω–µ –≤–æ—à–ª–∏ –≤ —á–∞—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /register')
        return
    # –†–∞–∑–±–∏–≤–∞–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–æ–º–∞–Ω–¥—É + –∞–¥—Ä–µ—Å–∞—Ç + —Ç–µ–∫—Å—Ç
    user_input = message.text.split(maxsplit=2)
    if len(user_input) < 2:
        bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
        return
    addressee = user_input[1]
    username = registered_users[message.from_user.id]
    # –ï—Å–ª–∏ —Ö–æ—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–æ–±—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if len(user_input) < 3:
        bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è')
        return
    if addressee.lower() == 'all':
        for target_user_id in registered_users.keys():
            bot.send_message(target_user_id, username + ': ' + user_input[2])
        return
    # –ï—Å–ª–∏ —Ö–æ—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if addressee.isdecimal():
        target_id = int(addressee)
        if target_id in registered_users.keys():
            bot.send_message(target_id, username + ': ' + user_input[2])
            return
    # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ –≤–≤—ë–ª
    bot.send_message(
        message.from_user.id,
        '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
        '–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —É–≤–∏–¥—è—Ç –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤–≤–µ–¥–∏—Ç–µ "all" –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã')

# –ö–æ–º–∞–Ω–¥–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ —á–∞—Ç–∞
@bot.message_handler(commands=['quit'])
def quit_command(message: telebot.types.Message):
    # –ï—Å–ª–∏ –ø—ã—Ç–∞–µ—Ç—Å—è –≤—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞, –Ω–µ –∑–∞—Ö–æ–¥—è –≤ –Ω–µ–≥–æ
    if message.from_user.id not in registered_users:
        bot.send_message(message.from_user.id, '–í—ã –µ—â—ë –Ω–µ –≤—Ö–æ–¥–∏–ª–∏ –≤ —á–∞—Ç')
        return
    # –ï—Å–ª–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –≤—ã—Ö–æ–¥–∏—Ç
    else:
        registered_users.pop(message.from_user.id)
        bot.send_message(message.from_user.id, '–í—ã –≤—ã—à–ª–∏ –∏–∑ —á–∞—Ç–∞')


# –ö–æ–º–∞–Ω–¥–∞ –ø–æ–≥–æ–¥—ã
@bot.message_handler(commands=['weather'])
def weather_command(message: telebot.types.Message):
    msg=bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:")
    bot.register_next_step_handler(msg,getWeather)

#–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã
def getWeather(message):

    city=message.text
    #–°–ª–æ–≤–∞—Ä—å —Å–∏–≤–æ–ª–æ–≤ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–≥–æ–¥–µ
    dictionaryCodeToSmile = {
        "Clear": "–Ø—Å–Ω–æ ‚òÄ",
        "Clouds": "–û–±–ª–∞—á–Ω–æ üå•",
        "Rain": "–î–æ–∂–¥—å üåß",
        "Thunderstorm": "–ì—Ä–æ–∑–∞ ‚ö°",
        "Drizzle": "–ú–æ—Ä–æ—Å—å üíß",
        "Snow": "–°–Ω–µ–≥ ‚ùÑ",
        "Mist": "–¢—É–º–∞–Ω üå´"

    }
    try:
            req=requests.get(f"https://api.openweathermap.org/data/2.5/weather?q={city}&appid={open_weather_token}&units=metric")
            data=req.json()

            # –ü–µ—Ä–µ–±–æ—Ä —Å–ª–æ–≤–∞—Ä—è
            weatherSmile = data["weather"][0]["main"]
            if weatherSmile in dictionaryCodeToSmile:
                ws = dictionaryCodeToSmile[weatherSmile]
            else:
                ws = '–ù–µ –º–æ–≥—É –ø–æ–Ω—è—Ç—å —á—Ç–æ —Ç–∞–º, –≤—ã–≥–ª—è–Ω–∏ –≤ –æ–∫–Ω–æ'

            city=data["name"]
            weatherNow= data["main"]["temp"]
            weatherMax=data["main"]["temp_max"]
            weatherMin=data["main"]["temp_min"]
            humidity=data["main"]["humidity"]
            wind=data["wind"]["speed"]
            sunrise=datetime.datetime.fromtimestamp(data["sys"]["sunrise"])
            sunset = datetime.datetime.fromtimestamp(data["sys"]["sunset"])

            bot.send_message(message.from_user.id,f'–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ: {city}\n'
                  f'–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞ —Å–µ–π—á–∞—Å: {weatherNow} C¬∞ {ws}\n'
                  f'–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞ –∑–∞ –¥–µ–Ω—å: {weatherMax} C¬∞\n'
                  f'–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞ –∑–∞ –¥–µ–Ω—å: {weatherMin} C¬∞\n'
                  f'–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity} %\n'
                  f'–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind} –º/c\n'
                  f'–†–∞—Å—Å–≤–µ—Ç: {sunrise}\n'
                  f'–ó–∞–∫–∞—Ç: {sunset}\n'
                  f'–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–∞–º –¥–Ω—è'
                  )
    except Exception as ex:
        if(message.text[:1] == '/'):
            bot.send_message(message.from_user.id, '–í–æ–∑–º–æ–∂–Ω–æ –≤—ã —Å–ª—É—á–∞–π–Ω–æ –≤–≤–µ–ª–∏ –∫–æ–º–∞–Ω–¥—É, –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ–µ –µ—â–µ —Ä–∞–∑')
        else:
          while message.text[:1] != '/':
            msg = bot.send_message(message.from_user.id, '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ')
            bot.register_next_step_handler(msg, getWeather)
            break

#–ò–≥—Ä–∞ –∫—Ä–µ—Å—Ç–∏–∫–∏ –Ω–æ–ª–∏–∫–∏

winbool = False
losebool = False
drawbool=False


#–°–ª–æ–≤–∞—Ä—å –¥–æ—Å–∫–∏, –≥–¥–µ —Ö—Ä–∞–Ω–∏—Ç—Å—è –∫–Ω–æ–ø–∫–∞ –∏ –µ–µ callback data
board={}

#–ü–æ–ª–µ
ground = [" ", " ", " ",
          " ", " ", " ",
          " ", " ", " ",]

#–°–ø–∏—Å–æ–∫ –∫—Ä–µ—Å—Ç–∏–∫–æ–≤ –∏ –Ω–æ–ª–∏–∫–æ–≤
zero_or_x = ["O", "X"]

#–†–∞–Ω–¥–æ–º–Ω—ã–π –≤—ã–±–æ—Ä –∑–∞ –∫–æ–≥–æ –±—É–¥–µ—Ç –∏–≥—Ä–∞—Ç—å –∏–≥—Ä–æ–∫
# player_symbol = zero_or_x[random.randint(0, 1)]

# MAX="X"
# #–°–∏–º–≤–æ–ª –∏–∏
# ai_symbol = ""
#
# if (player_symbol == "X"):
#     ai_symbol = "O"
# else:
#     ai_symbol = "X"

player_symbol = "X"
ai_symbol = "O"

#–§—É–Ω–∫—Ü–∏—è –ø–æ–±–µ–¥—ã
def win(cell_1, cell_2, cell_3):
    if cell_1 == player_symbol and cell_2 == player_symbol and cell_3 == player_symbol:
        print("win")
        global winbool
        winbool = True

#–§—É–Ω–∫—Ü–∏—è –ø–æ—Ä–∞–∂–µ–Ω–∏—è
def lose(cell_1, cell_2, cell_3):
    if cell_1 == ai_symbol and cell_2 == ai_symbol and cell_3 == ai_symbol:
        print("lose")
        global losebool
        losebool = True

#–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∏—á—å—é
def draw(message):
    if(ground[0] != " " and ground[1] != " " and ground[2] != " " and ground[3] != " " and
       ground[4] != " " and ground[5] != " " and ground[6] != " " and ground[7] != " " and
       ground[8] != " "):
        bot.send_message(message.chat.id,"–û–≥–æ! –£ –Ω–∞—Å –Ω–∏—á—å—è! –í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –ø–æ—Å—Ç–æ—Ä–∞—é—Å—å –æ—Ç—ã–≥—Ä–∞—Ç—å—Å—è  üòâ. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑ –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /newgame")



#–§—É–Ω–∫—Ü–∏—è —Å –Ω–∏—á—å–µ–π
def check_draw():
    for i in range(9):
        if (ground[i] == " "):
            return False
        else:
            return True

#–§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –ø–æ–ª—è
def clear():
    global ground
    ground = [" ", " ", " ",
              " ", " ", " ",
              " ", " ", " ", ]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–±–µ–¥–Ω—ã—Ö –ª–∏–Ω–∏–π
victories = [[0,1,2],
             [3,4,5],
             [6,7,8],
             [0,3,6],
             [1,4,7],
             [2,5,8],
             [0,4,8],
             [2,4,6]]

#–í—ã–±–æ—Ä –∏–≥—Ä—ã (–∫—Ä–µ—Å—Ç–∏–∫ –∏–ª–∏ –Ω–æ–ª–∏–∫)
@bot.message_handler(commands=['newgame'])
def newgame_command(message: telebot.types.Message):
  #–ï—Å–ª–∏ –≤–¥—Ä—É–≥ –¥–æ—Å–∫–∞ –Ω–µ –æ—á–∏—Å—Ç–∏–ª–∞—Å—å, —Ç–æ –ø—Ä–∏ –≤–≤–æ–¥–µ –∫–æ–º–∞–Ω–¥—ã –æ—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫
  if (message.text[:1] == '/'):
    clear()

  board = {}
  bot.send_message(message.chat.id, "–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å")

  #–°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
  global keyboard
  keyboard=types.InlineKeyboardMarkup(row_width=3)

  #–î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å –¥–æ—Å–∫–∏ –∫–Ω–æ–ø–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
  for i in range(9):
      board[i] = types.InlineKeyboardButton(ground[i], callback_data=str(i))

  keyboard.row(board[0], board[1], board[2])
  keyboard.row(board[3], board[4], board[5])
  keyboard.row(board[6], board[7], board[8])
  #–û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
  bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –∫–ª–µ—Ç–∫—É", reply_markup=keyboard)


#–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: True)
def callbackInline(call):
    if (call.message):
        # –•–æ–¥ –∏–≥—Ä–æ–∫–∞
        for i in range(9):
            if call.data == str(i):
                if (ground[i] == " "):
                        ground[i] = player_symbol
                else:
                    bot.send_message(call.message.chat.id, "–≠—Ç–∞ –∫–ª–µ—Ç–∫–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é:")
                    return callbackInline

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏
        for i in range(9):
            board[i] = types.InlineKeyboardButton(ground[i], callback_data=str(i))

        #–•–æ–¥ –±–æ—Ç–∞(—Ä–∞–Ω–¥–æ–º–Ω—ã–π)
        # random_go()

        # Xol –ê–ò
        #–ü—Ä–æ–≤–µ—Ä–∫–∏
        if (ground[4] == player_symbol and ground[0] == " " and ground[5] == " "):
            ground[0] = ai_symbol
        elif (ground[2] == player_symbol and ground[1] == " " and ground[4] == " " and ground[5] == " "):
            ground[4] = ai_symbol
        elif (ground[3] == player_symbol and ground[4] == player_symbol and ground[5] == " "):
            ground[5] = ai_symbol
            # elif (ground[6] == player_symbol or ground[8]== player_symbol and ground[4] == " " and ground[7] == player_symbol):
            #     ground[4] = ai_symbol
        elif (ground[4] == player_symbol and ground[8] == player_symbol and ground[0] == " " and ground[8] == " "):
            ground[0] = ai_symbol
        elif (ground[6] == " " and ground[7] == player_symbol and ground[8] == player_symbol):
            ground[6] = ai_symbol
        elif (ground[6] == player_symbol and ground[7] == player_symbol and ground[8] == " "):
            ground[8] = ai_symbol
        elif (ground[8] == player_symbol and ground[7] == player_symbol and ground[6] == " "):
            ground[6] = ai_symbol
        elif (ground[1] == player_symbol and ground[4] == player_symbol and ground[7] == " "):
            ground[7] = ai_symbol
        elif (ground[0] == player_symbol and ground[4] == " "):
            ground[4] = ai_symbol
        elif (ground[2] == player_symbol and ground[4] == player_symbol and ground[6] == " " and ground[5] == " "):
            ground[6] = ai_symbol
        elif (ground[2] == player_symbol and ground[5] == player_symbol and ground[8] == " "):
            ground[8] = ai_symbol
        elif (ground[0] == player_symbol and ground[3] == player_symbol and ground[6] == " "):
            ground[6] = ai_symbol
        elif (ground[4] == player_symbol and ground[5] == player_symbol and ground[3] == " "):
            ground[3] = ai_symbol
        elif (ground[7] == player_symbol and ground[0] == " " and ground[1] == " " and ground[2] == " " and ground[
            3] == " " and ground[4] == " " and ground[5] == " " and ground[6] == " " and ground[8] == " "):
            ground[4] = ai_symbol
        elif (ground[6] == player_symbol and ground[0] == " " and ground[1] == " " and ground[2] == " " and ground[
            3] == " " and ground[4] == " " and ground[5] == " " and ground[7] == " " and ground[8] == " "):
            ground[4] = ai_symbol
        elif (ground[3] == player_symbol and ground[0] == " " and ground[1] == " " and ground[2] == " " and ground[
            4] == " " and ground[5] == " " and ground[6] == " " and ground[7] == " " and ground[8] == " "):
            ground[4] = ai_symbol
        elif(ground[1] == player_symbol and ground[0] == " " and ground[2] == " " and ground[3] == " " and ground[
            4] == " " and ground[5] == " " and ground[6] == " " and ground[7] == " " and ground[8] == " "):
            ground[4]=ai_symbol
        elif (ground[0] == ai_symbol and ground[1] == " " and ground[2] == " " and ground[3] == " " and ground[
            4] == player_symbol and ground[5] == " " and ground[6] == " " and ground[7] == " " and ground[8] == player_symbol):
            ground[2] = ai_symbol
        #
        else:
         best_spot=minimax(ground,ai_symbol)
         for i in range(9):
            if(best_spot == i):
                if(ground[i] == " "):
                    ground[i] = ai_symbol

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏
        for i in range(9):
            board[i] = types.InlineKeyboardButton(ground[i], callback_data=str(i))

        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        for i in range(9):
            # –Ω–∞ –ø–æ–±–µ–¥—É –∏–≥—Ä–æ–∫–∞
            win(ground[0], ground[1], ground[2])
            win(ground[3], ground[4], ground[5])
            win(ground[6], ground[7], ground[8])
            win(ground[0], ground[3], ground[6])
            win(ground[1], ground[4], ground[7])
            win(ground[2], ground[5], ground[8])
            win(ground[0], ground[4], ground[8])
            win(ground[6], ground[4], ground[2])
            # –Ω–∞ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
            lose(ground[0], ground[1], ground[2])
            lose(ground[3], ground[4], ground[5])
            lose(ground[6], ground[7], ground[8])
            lose(ground[0], ground[3], ground[6])
            lose(ground[1], ground[4], ground[7])
            lose(ground[2], ground[5], ground[8])
            lose(ground[0], ground[4], ground[8])
            lose(ground[6], ground[4], ground[2])
        # –Ω–∞ –Ω–∏—á—å—é
        draw(call.message)

        keyboard = types.InlineKeyboardMarkup(row_width=3)
        keyboard.row(board[0], board[1], board[2])
        keyboard.row(board[3], board[4], board[5])
        keyboard.row(board[6], board[7], board[8])

        #–ó–∞–º–µ–Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è(–∫–ª–∞–≤–∞) –±–æ—Ç–∞ –Ω–∞ –≤–Ω–æ–≤—å –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–Ω—É—é
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–Ø —Å—Ö–æ–¥–∏–ª.–¢–µ–ø–µ—Ä—å —Ç–≤–æ–π —Ö–æ–¥",
                              reply_markup=keyboard)

        #–ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –ø–æ–±–µ–¥–∏–ª
        global winbool
        if winbool:
            clear()
            bot.send_message(call.message.chat.id, "–Ø –ø—Ä–æ–∏–≥—Ä–∞–ª üòû. –≠—Ö, –≤—Å–µ-—Ç–∞–∫–∏ —Ç—ã –æ–±—ã–≥—Ä–∞–ª –º–µ–Ω—è. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑ –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /newgame")
            winbool = False

        #–ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –ø—Ä–æ–∏–≥—Ä–∞–ª
        global losebool
        if losebool:
            clear()
            bot.send_message(call.message.chat.id, "–Ø –≤—ã–∏–≥—Ä–∞–ª  üòÄ. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑ –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /newgame")
            losebool = False


# –†–∞–Ω–¥–æ–º–Ω—ã–π —Ö–æ–¥ –¥–ª—è –±–æ—Ç–∞
def random_go():
    random_cell = random.randint(0, 8)
    if ground[random_cell] == player_symbol:
        random_cell = random.randint(0, 8)
    if ground[random_cell] == ai_symbol:
        random_cell = random.randint(0, 8)
    if ground[random_cell] == " ":
        ground[random_cell] = ai_symbol

#–í–æ–∑–≤—Ä–∞—Ç –∏–Ω–¥–µ–∫—Å–æ–≤ –ø—É—Å—Ç—ã—Ö –∫–ª–µ—Ç–æ–∫ –¥–æ—Å–∫–∏
def empty_indeces(board):
     list_null_board=[]
     for i in range(9):
         if(board[i] == " "):
             list_null_board.append(i)
     return list_null_board

#–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–±–µ–¥—É –¥–ª—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –º–∏–Ω–∏–º–∞–∫—Å
def winning(board, player):
  if(
    (board[0] == player and board[1] == player and board[2] == player) or
    (board[3] == player and board[4] == player and board[5] == player) or
    (board[6] == player and board[7] == player and board[8] == player) or
    (board[0] == player and board[3] == player and board[6] == player) or
    (board[1] == player and board[4] == player and board[7] == player) or
    (board[2] == player and board[5] == player and board[8] == player) or
    (board[0] == player and board[4] == player and board[8] == player) or
    (board[2] == player and board[4] == player and board[6] == player)
    ):
      return True
  else :
      return False

#–ê–ª–≥–æ—Ä–∏—Ç–º –º–∏–Ω–∏–º–∞–∫—Å –¥–ª—è –ê–ò
def minimax(board,player):
    global best_move
    #–¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª–µ—Ç–∫–∏
    avail_spots=empty_indeces(board)
    #–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ(–ø–æ–±–µ–¥–∞, –ø–æ—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –Ω–∏—á—å—è)
    if(winning(board,player_symbol)):
        return -10
    elif(winning(board,ai_symbol)):
        return 10
    elif(len(avail_spots) == 0):
        return 0

    #–°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞ –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ–º —Å—Ç–∞–≤–∏—Ç—å O
    move_win=[]
    #–°–ø–∏—Å–æ–∫ –¥–ª—è –æ—á–∫–æ–≤ –∫–∞–∂–¥–æ–≥–æ —Ö–æ–¥–∞
    moves=[]
    #–¶–∏–∫–ª –ø–æ –≤—Å–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º –∫–ª–µ—Ç–∫–∞–º
    for i in range(len(avail_spots)):
        #–°–ª–æ–≤–∞—Ä—å —Ö–æ–¥–æ–≤
        move={}
        #–ó–∞–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –ø—É—Å—Ç–æ–π –∫–ª–µ—Ç–∫–∏
        move['index']=board[avail_spots[i]]
        #–°–æ–≤–µ—Ä—à–∏—Ç—å —Ö–æ–¥ –∑–∞ —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
        board[avail_spots[i]] = player

        #–ü–æ–ª—É—á–∏—Ç—å –æ—á–∫–∏, –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –≤—ã–∑–æ–≤–∞ –º–∏–Ω–∏–º–∞–∫—Å–∞ –æ—Ç –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
        if player == ai_symbol:
            #–†–µ–∑—É–ª—å—Ç–∞—Ç –º–∏–Ω–∏–º–∞–∫—Å
            result=minimax(board,player_symbol)
            #–ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–ª–æ–≤–∞—Ä—å
            move['score']=result
        else:
            result=minimax(board,ai_symbol)
            move['score'] = result

        #–î–æ–±–∞–≤–∏—Ç—å –∏–Ω–¥–µ–∫—Å –ø–æ–ª—è –≤ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ–º —Ö–æ–¥–∏—Ç—å
        move_win.append(avail_spots[i])
        #–û—á–∏—Å—Ç–∏—Ç—å –∫–ª–µ—Ç–∫—É
        board[avail_spots[i]] = move['index']
        #–ü–æ–ª–æ–∂–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å –æ—á–∫–æ–≤ –≤ —Å–ø–∏—Å–æ–∫
        moves.append(move['score'])

        #–ï—Å–ª–∏ —ç—Ç–æ —Ö–æ–¥ –ò–ò, –ø—Ä–æ–π—Ç–∏ —Ü–∏–∫–ª–æ–º –ø–æ —Ö–æ–¥–∞–º –∏ –≤—ã–±—Ä–∞—Ç—å —Ö–æ–¥ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ–º –æ—á–∫–æ–≤
        if(player == ai_symbol):
            #–ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–æ–µ —á–∏—Å–ª–æ
            best_score=-10000
            #T—Å–ª–∏ —Ö–æ–¥ move –ø—Ä–∏–Ω–æ—Å–∏—Ç –±–æ–ª—å—à–µ –æ—á–∫–æ–≤, —á–µ–º bestScore, –∞–ª–≥–æ—Ä–∏—Ç–º –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç —ç—Ç–æ—Ç move
            for i in range(len(moves)):
                if(moves[i] > best_score):
                    best_score=moves[i]
                    best_move=i
        #–ò–Ω–∞—á–µ –ø—Ä–æ–π—Ç–∏ —Ü–∏–∫–ª–æ–º –ø–æ —Ö–æ–¥–∞–º –∏ –≤—ã–±—Ä–∞—Ç—å —Ö–æ–¥ —Å –Ω–∞–∏–º–µ–Ω—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –æ—á–∫–æ–≤
        else:
            best_score=10000
            for i in range(len(moves)):
                if(moves[i]<best_score):
                    best_score=moves[i]
                    best_move=i

    #–í–µ—Ä–Ω—É—Ç—å –∏–Ω–¥–µ–∫—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ö–æ–¥–∞
    return move_win[best_move]

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
def main():
    bot.polling()

#–ó–∞–ø—É—Å–∫
main()